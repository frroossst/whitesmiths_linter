// Use of fixed size types like int32_t or uint32_t are acceptable as long as they are consistent
// with other requirements for signed vs unsigned.

// Headers.  You can add more if you need to.
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <err.h>

#define STRING_N_BUFFER       99
/*******************************************************************
 * Add other type definitions for your data structure solution here.
 *******************************************************************/
typedef struct _raid {
    // general info
    char raid_commander[99];
    char raided_river_town[99];
    // datetime
    uint8_t day;
    uint8_t month;
    uint32_t year;
    uint8_t hour;
    uint8_t minute;
    // plunder
    uint32_t wheat;
    uint32_t barley;
    uint32_t others;
} Raid;

typedef struct _ship {
    // ship
    char name[99];
    // raid capacity
    uint32_t raid_hold;
    // Raid records
    Raid* raid_records;

} Ship;

// This structure will be your main database.
typedef struct _database 	{
    /************************************************
     * Add fields for the overall database here.
     ************************************************/
    uint32_t fleet;
    Ship* ships;

} ShipDatabase;


/**
 * Create a new database of ships.
 *
 * Parameters:
 *
 * num_ships -            Number of ships in the database.
 * ship_capacities -      Pointer to first element of an array that holds the number of raids that each ship can
 *                        store in its cargo hold.
 * ship_names -           Pointer to the first element of a pointer array that stores the name of each ship.
 *
 * Returns a pointer to the newly allocated (but *uninitialized*) database.
 */
ShipDatabase* new_database(size_t num_ships, size_t *ship_capacities, char* ship_names[]) {
    /************************************************************************
    * Write this function to allocate space for your database data structure.
    * Remember: you don't have to initialize it with data, just allocate
    * storage.
    *************************************************************************/
	ShipDatabase* yarr_db = (ShipDatabase*)malloc(sizeof(ShipDatabase));
	if (yarr_db == NULL){
		errx(1, "memory allocation failed!");
}
	
    yarr_db->fleet = num_ships;
    Ship* ships_arr = (Ship*)malloc(sizeof(Ship) * num_ships);
	if (ships_arr == NULL)		{
		errx(1, "memory allocation failed!");
	}

	for (int i = 0; i < num_ships; i++)     		{
        strncpy(ships_arr[i].name, ship_names[i], STRING_N_BUFFER + 1);
        ships_arr[i].raid_hold = ship_capacities[i];
        ships_arr[i].raid_records = (Raid*)malloc(sizeof(Raid) * ship_capacities[i]);
	    if (ships_arr[i].raid_records == NULL)
{
	    	errx(1, "memory allocation failed!");	    	}
}

    yarr_db->ships = ships_arr;

    return yarr_db; 	}

/**
 * Free all memory associated with a zombie database.
 *
 * Parameters:
 *
 * db - a pointer to a zombie database.
 */
void scuttle_database(ShipDatabase *db) {
    /************************************************************************
    * Write this function free all dynamically allocated memory associated
    * with the database db.
    *************************************************************************/
    // free bottom up
    for (int i = 0; i < db->fleet; i++){
        free(db->ships[i].raid_records);
    }

    free(db->ships);

    free(db);
}

int main() 	{
    const size_t num_ships = 5;
    size_t ship_capacities[5] = {12, 15, 6, 4, 19};
    char *ship_names[] = {
            "The Prairie Onion",
            "The Pirating Plover",
            "The Haskap Hunter",
            "The Scourge of Saskatoon",
            "The Aurora"
 	   };

    ShipDatabase *db = new_database(num_ships, ship_capacities, ship_names);

    /* 
    BASIC FUNCTIONALITY TESTING
 
    Raid r11;
    strcpy(r11.raid_commander, "Conquistador Don");
    db->ships[1].raid_records[1] = r11;
    db->ships[1].raid_records[1].wheat = 10;
    db->ships[1].raid_records[1].year = 2022;

    printf("Information for : %s \n", db->ships[1].name);
    printf("Raid number : 1 \n");
    printf("year : %d \n",db->ships[1].raid_records[1].year);
    printf("%s \n", r11.raid_commander);
    printf("wheat in kgs : %d \n",db->ships[1].raid_records[1].wheat);
    printf("mem free; \n");
    scuttle_database(db); // struct access should seg fault after here
    printf("Information for : %s \n", db->ships[1].name);
    printf("Raid number : 1 \n");
    printf("year : %d \n",db->ships[1].raid_records[1].year);
    printf("%s \n", r11.raid_commander);
    printf("wheat in kgs : %d \n",db->ships[1].raid_records[1].wheat);
    */

    scuttle_database(db);

    return 0;
}