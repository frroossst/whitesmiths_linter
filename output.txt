[SKIPPED] linter.py found in exception list
[SKIPPED] .git is a directory
[SKIPPED] TODO found in exception list
[SKIPPED] tests.py found in exception list
********** After Brackets Aligned
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>



void bmain()
   {
   printf("whitesmiths indent example");
   if (true)
      {
      bool test = false;
      }
   }

int main() 
{
   char str[5][50], temp[50];
   printf("Enter 5 words: ");

   // Getting strings input
   for (int i = 0; i < 5; ++i) 
{
      fgets(str[i], sizeof(str[i]), stdin);
}

   // storing strings in the lexicographical order
   for (int i = 0; i < 5; ++i) 
{
      for (int j = i + 1; j < 5; ++j) 
{
         // swapping strings if they are not in the lexicographical order
         if (strcmp(str[i], str[j]) > 0) 
{}
            strcpy(temp, str[i]);
            strcpy(str[i], str[j]);
            strcpy(str[j], temp);
         }
      }

   for (int i = 0; i < 5; ++i) 
{
      fputs(str[i], stdout);
}

   return 0;

}



void foo() 
{
    if (true) 
{
        foo();
   }
   else if (true) 
{}
   else 
{
        bar();
        foo();
        foobar();
        }
}

1 #include <stdint.h>
prev line: #include <stdbool.h>
prev indent: 0
curr line: #include <stdint.h>
curr indent: 0

2 #include <stdio.h>
prev line: #include <stdint.h>
prev indent: 0
curr line: #include <stdio.h>
curr indent: 0

3 
prev line: #include <stdio.h>
prev indent: 0
curr line: 
curr indent: 0

4 
prev line: 
prev indent: 0
curr line: 
curr indent: 0

5 
prev line: 
prev indent: 0
curr line: 
curr indent: 0

6 void bmain()
prev line: 
prev indent: 0
curr line: void bmain()
curr indent: 0

7    {
prev line: void bmain()
prev indent: 0
curr line:    {
curr indent: 4

8    printf("whitesmiths indent example");
prev line:     {
prev indent: 8
curr line:    printf("whitesmiths indent example");
curr indent: 4

9    if (true)
prev line:         printf("whitesmiths indent example");
prev indent: 12
curr line:    if (true)
curr indent: 4

10       {
prev line:             if (true)
prev indent: 16
curr line:       {
curr indent: 8

11       bool test = false;
prev line:                     {
prev indent: 24
curr line:       bool test = false;
curr indent: 8

12       }
prev line:                         bool test = false;
prev indent: 28
curr line:       }
curr indent: 8

13    }
prev line:                             }
prev indent: 32
curr line:    }
curr indent: 4

14 
prev line:    }
prev indent: 4
curr line: 
curr indent: 0

15 int main() 
prev line: 
prev indent: 0
curr line: int main() 
curr indent: 0

16 {
prev line: int main() 
prev indent: 0
curr line: {
curr indent: 0

17    char str[5][50], temp[50];
prev line:     {
prev indent: 8
curr line:    char str[5][50], temp[50];
curr indent: 4

18    printf("Enter 5 words: ");
prev line:         char str[5][50], temp[50];
prev indent: 12
curr line:    printf("Enter 5 words: ");
curr indent: 4

19 
prev line:             printf("Enter 5 words: ");
prev indent: 16
curr line: 
curr indent: 0

20    // Getting strings input
prev line:                 
prev indent: 20
curr line:    // Getting strings input
curr indent: 4

21    for (int i = 0; i < 5; ++i) 
prev line:                     // Getting strings input
prev indent: 24
curr line:    for (int i = 0; i < 5; ++i) 
curr indent: 4

22 {
prev line:                         for (int i = 0; i < 5; ++i) 
prev indent: 28
curr line: {
curr indent: 0

23       fgets(str[i], sizeof(str[i]), stdin);
prev line:                                 {
prev indent: 36
curr line:       fgets(str[i], sizeof(str[i]), stdin);
curr indent: 8

24 }
prev line:                                     fgets(str[i], sizeof(str[i]), stdin);
prev indent: 40
curr line: }
curr indent: 0

25 
prev line:                                         }
prev indent: 44
curr line: 
curr indent: 0

26    // storing strings in the lexicographical order
prev line:                                         
prev indent: 44
curr line:    // storing strings in the lexicographical order
curr indent: 4

27    for (int i = 0; i < 5; ++i) 
prev line:                                             // storing strings in the lexicographical order
prev indent: 48
curr line:    for (int i = 0; i < 5; ++i) 
curr indent: 4

28 {
prev line:                                                 for (int i = 0; i < 5; ++i) 
prev indent: 52
curr line: {
curr indent: 0

29       for (int j = i + 1; j < 5; ++j) 
prev line:                                                         {
prev indent: 60
curr line:       for (int j = i + 1; j < 5; ++j) 
curr indent: 8

30 {
prev line:                                                             for (int j = i + 1; j < 5; ++j) 
prev indent: 64
curr line: {
curr indent: 0

31          // swapping strings if they are not in the lexicographical order
prev line:                                                                     {
prev indent: 72
curr line:          // swapping strings if they are not in the lexicographical order
curr indent: 12

32          if (strcmp(str[i], str[j]) > 0) 
prev line:                                                                         // swapping strings if they are not in the lexicographical order
prev indent: 76
curr line:          if (strcmp(str[i], str[j]) > 0) 
curr indent: 12

33 {}
prev line:                                                                             if (strcmp(str[i], str[j]) > 0) 
prev indent: 80
curr line: {}
curr indent: 0

34             strcpy(temp, str[i]);
prev line:                                                                                 {}
prev indent: 84
curr line:             strcpy(temp, str[i]);
curr indent: 16

35             strcpy(str[i], str[j]);
prev line:                                                                                     strcpy(temp, str[i]);
prev indent: 88
curr line:             strcpy(str[i], str[j]);
curr indent: 16

36             strcpy(str[j], temp);
prev line:                                                                                         strcpy(str[i], str[j]);
prev indent: 92
curr line:             strcpy(str[j], temp);
curr indent: 16

37          }
prev line:                                                                                             strcpy(str[j], temp);
prev indent: 96
curr line:          }
curr indent: 12

38       }
prev line:                                                                                                 }
prev indent: 100
curr line:       }
curr indent: 8

39 
prev line:       }
prev indent: 8
curr line: 
curr indent: 0

40    for (int i = 0; i < 5; ++i) 
prev line:     
prev indent: 8
curr line:    for (int i = 0; i < 5; ++i) 
curr indent: 4

41 {
prev line:         for (int i = 0; i < 5; ++i) 
prev indent: 12
curr line: {
curr indent: 0

42       fputs(str[i], stdout);
prev line:                 {
prev indent: 20
curr line:       fputs(str[i], stdout);
curr indent: 8

43 }
prev line:                     fputs(str[i], stdout);
prev indent: 24
curr line: }
curr indent: 0

44 
prev line:                         }
prev indent: 28
curr line: 
curr indent: 0

45    return 0;
prev line:                         
prev indent: 28
curr line:    return 0;
curr indent: 4

46 
prev line:                             return 0;
prev indent: 32
curr line: 
curr indent: 0

47 }
prev line:                                 
prev indent: 36
curr line: }
curr indent: 0

48 
prev line:                                     }
prev indent: 40
curr line: 
curr indent: 0

49 
prev line:                                     
prev indent: 40
curr line: 
curr indent: 0

50 
prev line:                                         
prev indent: 44
curr line: 
curr indent: 0

51 void foo() 
prev line:                                             
prev indent: 48
curr line: void foo() 
curr indent: 0

52 {
prev line:                                                 void foo() 
prev indent: 52
curr line: {
curr indent: 0

53     if (true) 
prev line:                                                         {
prev indent: 60
curr line:     if (true) 
curr indent: 8

54 {
prev line:                                                             if (true) 
prev indent: 64
curr line: {
curr indent: 0

55         foo();
prev line:                                                                     {
prev indent: 72
curr line:         foo();
curr indent: 12

56    }
prev line:                                                                         foo();
prev indent: 76
curr line:    }
curr indent: 4

57    else if (true) 
prev line:                                                                             }
prev indent: 80
curr line:    else if (true) 
curr indent: 4

58 {}
prev line:                                                                             else if (true) 
prev indent: 80
curr line: {}
curr indent: 0

59    else 
prev line:                                                                                 {}
prev indent: 84
curr line:    else 
curr indent: 4

60 {
prev line:                                                                                     else 
prev indent: 88
curr line: {
curr indent: 0

61         bar();
prev line:                                                                                             {
prev indent: 96
curr line:         bar();
curr indent: 12

62         foo();
prev line:                                                                                                 bar();
prev indent: 100
curr line:         foo();
curr indent: 12

63         foobar();
prev line:                                                                                                     foo();
prev indent: 104
curr line:         foobar();
curr indent: 12

64         }
prev line:                                                                                                         foobar();
prev indent: 108
curr line:         }
curr indent: 12

65 }
prev line:                                                                                                             }
prev indent: 112
curr line: }
curr indent: 0

66 
prev line: }
prev indent: 0
curr line: 
curr indent: 0

********** After Indent Management
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>



void bmain()
    {
        printf("whitesmiths indent example");
            if (true)
                    {
                        bool test = false;
                            }
   }

int main() 
    {
        char str[5][50], temp[50];
            printf("Enter 5 words: ");
                
                    // Getting strings input
                        for (int i = 0; i < 5; ++i) 
                                {
                                    fgets(str[i], sizeof(str[i]), stdin);
                                        }
                                        
                                            // storing strings in the lexicographical order
                                                for (int i = 0; i < 5; ++i) 
                                                        {
                                                            for (int j = i + 1; j < 5; ++j) 
                                                                    {
                                                                        // swapping strings if they are not in the lexicographical order
                                                                            if (strcmp(str[i], str[j]) > 0) 
                                                                                {}
                                                                                    strcpy(temp, str[i]);
                                                                                        strcpy(str[i], str[j]);
                                                                                            strcpy(str[j], temp);
                                                                                                }
      }
    
        for (int i = 0; i < 5; ++i) 
                {
                    fputs(str[i], stdout);
                        }
                        
                            return 0;
                                
                                    }
                                    
                                        
                                            
                                                void foo() 
                                                        {
                                                            if (true) 
                                                                    {
                                                                        foo();
                                                                            }
                                                                            else if (true) 
                                                                                {}
                                                                                    else 
                                                                                            {
                                                                                                bar();
                                                                                                    foo();
                                                                                                        foobar();
                                                                                                            }
}

[LINTED] pres
