[SKIPPED] linter.py found in exception list
[SKIPPED] .git is a directory
[SKIPPED] TODO found in exception list
[SKIPPED] tests.py found in exception list
********** After Brackets Aligned
int testmain() 
{
   char str[5][50], temp[50];
   printf("Enter 5 words: ");

   // Getting strings input
   for (int i = 0; i < 5; ++i) 
{
      fgets(str[i], sizeof(str[i]), stdin);
}

   // storing strings in the lexicographical order
   for (int i = 0; i < 5; ++i) 
{
      for (int j = i + 1; j < 5; ++j) 
{
         // swapping strings if they are not in the lexicographical order
         if (strcmp(str[i], str[j]) > 0) 
{}
            strcpy(temp, str[i]);
            strcpy(str[i], str[j]);
            strcpy(str[j], temp);
         }
      }

   for (int i = 0; i < 5; ++i) 
{
      fputs(str[i], stdout);
}

   return 0;

}

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>



void bmain()
   {
   printf("whitesmiths indent example");
   if (true)
      {
      bool test = false;
      }
   }

int main() 
{
   char str[5][50], temp[50];
   printf("Enter 5 words: ");

   // Getting strings input
   for (int i = 0; i < 5; ++i) 
{
      fgets(str[i], sizeof(str[i]), stdin);
}

   // storing strings in the lexicographical order
   for (int i = 0; i < 5; ++i) 
{
      for (int j = i + 1; j < 5; ++j) 
{
         // swapping strings if they are not in the lexicographical order
         if (strcmp(str[i], str[j]) > 0) 
{}
            strcpy(temp, str[i]);
            strcpy(str[i], str[j]);
            strcpy(str[j], temp);
         }
      }

   for (int i = 0; i < 5; ++i) 
{
      fputs(str[i], stdout);
}

   return 0;

}



void foo() 
{
    if (true) 
{
        foo();
   }
   else if (true) 
{}
   else 
{
        bar();
        foo();
        foobar();
        }
}

1 |prev line: int testmain()  |prev indent: 0 |curr line: { |curr indent: 0 |
2 |prev line:     { |prev indent: 4 |curr line:    char str[5][50], temp[50]; |curr indent: 4 |
3 |prev line:     char str[5][50], temp[50]; |prev indent: 4 |curr line:    printf("Enter 5 words: "); |curr indent: 4 |
4 |prev line:     printf("Enter 5 words: "); |prev indent: 4 |curr line:  |curr indent: 4 |
5 |prev line:      |prev indent: 4 |curr line:    // Getting strings input |curr indent: 4 |
6 |prev line:     // Getting strings input |prev indent: 4 |curr line:    for (int i = 0; i < 5; ++i)  |curr indent: 4 |
7 |prev line:     for (int i = 0; i < 5; ++i)  |prev indent: 4 |curr line: { |curr indent: 4 |
8 |prev line:         { |prev indent: 8 |curr line:       fgets(str[i], sizeof(str[i]), stdin); |curr indent: 8 |
9 |prev line:         fgets(str[i], sizeof(str[i]), stdin); |prev indent: 8 |curr line: } |curr indent: 8 |
10 |prev line:         } |prev indent: 8 |curr line:  |curr indent: 8 |
11 |prev line:      |prev indent: 4 |curr line:    // storing strings in the lexicographical order |curr indent: 4 |
12 |prev line:     // storing strings in the lexicographical order |prev indent: 4 |curr line:    for (int i = 0; i < 5; ++i)  |curr indent: 4 |
13 |prev line:     for (int i = 0; i < 5; ++i)  |prev indent: 4 |curr line: { |curr indent: 4 |
14 |prev line:         { |prev indent: 8 |curr line:       for (int j = i + 1; j < 5; ++j)  |curr indent: 8 |
15 |prev line:         for (int j = i + 1; j < 5; ++j)  |prev indent: 8 |curr line: { |curr indent: 8 |
16 |prev line:             { |prev indent: 12 |curr line:          // swapping strings if they are not in the lexicographical order |curr indent: 12 |
17 |prev line:             // swapping strings if they are not in the lexicographical order |prev indent: 12 |curr line:          if (strcmp(str[i], str[j]) > 0)  |curr indent: 12 |
18 |prev line:             if (strcmp(str[i], str[j]) > 0)  |prev indent: 12 |curr line: {} |curr indent: 12 |
19 |prev line:             {} |prev indent: 12 |curr line:             strcpy(temp, str[i]); |curr indent: 12 |
20 |prev line:             strcpy(temp, str[i]); |prev indent: 12 |curr line:             strcpy(str[i], str[j]); |curr indent: 12 |
21 |prev line:             strcpy(str[i], str[j]); |prev indent: 12 |curr line:             strcpy(str[j], temp); |curr indent: 12 |
22 |prev line:             strcpy(str[j], temp); |prev indent: 12 |curr line:          } |curr indent: 12 |
23 |prev line:             } |prev indent: 12 |curr line:       } |curr indent: 12 |
24 |prev line:       } |prev indent: 8 |curr line:  |curr indent: 8 |
25 |prev line:      |prev indent: 4 |curr line:    for (int i = 0; i < 5; ++i)  |curr indent: 4 |
26 |prev line:     for (int i = 0; i < 5; ++i)  |prev indent: 4 |curr line: { |curr indent: 4 |
27 |prev line:         { |prev indent: 8 |curr line:       fputs(str[i], stdout); |curr indent: 8 |
28 |prev line:         fputs(str[i], stdout); |prev indent: 8 |curr line: } |curr indent: 8 |
29 |prev line:         } |prev indent: 8 |curr line:  |curr indent: 8 |
30 |prev line:      |prev indent: 4 |curr line:    return 0; |curr indent: 4 |
31 |prev line:     return 0; |prev indent: 4 |curr line:  |curr indent: 4 |
32 |prev line:      |prev indent: 4 |curr line: } |curr indent: 4 |
33 |prev line:     } |prev indent: 4 |curr line:  |curr indent: 4 |
34 |prev line:  |prev indent: 0 |curr line: #include <stdbool.h> |curr indent: 0 |
35 |prev line: #include <stdbool.h> |prev indent: 0 |curr line: #include <stdint.h> |curr indent: 0 |
36 |prev line: #include <stdint.h> |prev indent: 0 |curr line: #include <stdio.h> |curr indent: 0 |
37 |prev line: #include <stdio.h> |prev indent: 0 |curr line:  |curr indent: 0 |
38 |prev line:  |prev indent: 0 |curr line:  |curr indent: 0 |
39 |prev line:  |prev indent: 0 |curr line:  |curr indent: 0 |
40 |prev line:  |prev indent: 0 |curr line: void bmain() |curr indent: 0 |
41 |prev line: void bmain() |prev indent: 0 |curr line:    { |curr indent: 0 |
42 |prev line:     { |prev indent: 4 |curr line:    printf("whitesmiths indent example"); |curr indent: 4 |
43 |prev line:     printf("whitesmiths indent example"); |prev indent: 4 |curr line:    if (true) |curr indent: 4 |
44 |prev line:     if (true) |prev indent: 4 |curr line:       { |curr indent: 4 |
45 |prev line:         { |prev indent: 8 |curr line:       bool test = false; |curr indent: 8 |
46 |prev line:         bool test = false; |prev indent: 8 |curr line:       } |curr indent: 8 |
47 |prev line:         } |prev indent: 8 |curr line:    } |curr indent: 8 |
48 |prev line:    } |prev indent: 4 |curr line:  |curr indent: 4 |
49 |prev line:  |prev indent: 0 |curr line: int main()  |curr indent: 0 |
50 |prev line: int main()  |prev indent: 0 |curr line: { |curr indent: 0 |
51 |prev line:     { |prev indent: 4 |curr line:    char str[5][50], temp[50]; |curr indent: 4 |
52 |prev line:     char str[5][50], temp[50]; |prev indent: 4 |curr line:    printf("Enter 5 words: "); |curr indent: 4 |
53 |prev line:     printf("Enter 5 words: "); |prev indent: 4 |curr line:  |curr indent: 4 |
54 |prev line:      |prev indent: 4 |curr line:    // Getting strings input |curr indent: 4 |
55 |prev line:     // Getting strings input |prev indent: 4 |curr line:    for (int i = 0; i < 5; ++i)  |curr indent: 4 |
56 |prev line:     for (int i = 0; i < 5; ++i)  |prev indent: 4 |curr line: { |curr indent: 4 |
57 |prev line:         { |prev indent: 8 |curr line:       fgets(str[i], sizeof(str[i]), stdin); |curr indent: 8 |
58 |prev line:         fgets(str[i], sizeof(str[i]), stdin); |prev indent: 8 |curr line: } |curr indent: 8 |
59 |prev line:         } |prev indent: 8 |curr line:  |curr indent: 8 |
60 |prev line:      |prev indent: 4 |curr line:    // storing strings in the lexicographical order |curr indent: 4 |
61 |prev line:     // storing strings in the lexicographical order |prev indent: 4 |curr line:    for (int i = 0; i < 5; ++i)  |curr indent: 4 |
62 |prev line:     for (int i = 0; i < 5; ++i)  |prev indent: 4 |curr line: { |curr indent: 4 |
63 |prev line:         { |prev indent: 8 |curr line:       for (int j = i + 1; j < 5; ++j)  |curr indent: 8 |
64 |prev line:         for (int j = i + 1; j < 5; ++j)  |prev indent: 8 |curr line: { |curr indent: 8 |
65 |prev line:             { |prev indent: 12 |curr line:          // swapping strings if they are not in the lexicographical order |curr indent: 12 |
66 |prev line:             // swapping strings if they are not in the lexicographical order |prev indent: 12 |curr line:          if (strcmp(str[i], str[j]) > 0)  |curr indent: 12 |
67 |prev line:             if (strcmp(str[i], str[j]) > 0)  |prev indent: 12 |curr line: {} |curr indent: 12 |
68 |prev line:             {} |prev indent: 12 |curr line:             strcpy(temp, str[i]); |curr indent: 12 |
69 |prev line:             strcpy(temp, str[i]); |prev indent: 12 |curr line:             strcpy(str[i], str[j]); |curr indent: 12 |
70 |prev line:             strcpy(str[i], str[j]); |prev indent: 12 |curr line:             strcpy(str[j], temp); |curr indent: 12 |
71 |prev line:             strcpy(str[j], temp); |prev indent: 12 |curr line:          } |curr indent: 12 |
72 |prev line:             } |prev indent: 12 |curr line:       } |curr indent: 12 |
73 |prev line:       } |prev indent: 8 |curr line:  |curr indent: 8 |
74 |prev line:      |prev indent: 4 |curr line:    for (int i = 0; i < 5; ++i)  |curr indent: 4 |
75 |prev line:     for (int i = 0; i < 5; ++i)  |prev indent: 4 |curr line: { |curr indent: 4 |
76 |prev line:         { |prev indent: 8 |curr line:       fputs(str[i], stdout); |curr indent: 8 |
77 |prev line:         fputs(str[i], stdout); |prev indent: 8 |curr line: } |curr indent: 8 |
78 |prev line:         } |prev indent: 8 |curr line:  |curr indent: 8 |
79 |prev line:      |prev indent: 4 |curr line:    return 0; |curr indent: 4 |
80 |prev line:     return 0; |prev indent: 4 |curr line:  |curr indent: 4 |
81 |prev line:      |prev indent: 4 |curr line: } |curr indent: 4 |
82 |prev line:     } |prev indent: 4 |curr line:  |curr indent: 4 |
83 |prev line:  |prev indent: 0 |curr line:  |curr indent: 0 |
84 |prev line:  |prev indent: 0 |curr line:  |curr indent: 0 |
85 |prev line:  |prev indent: 0 |curr line: void foo()  |curr indent: 0 |
86 |prev line: void foo()  |prev indent: 0 |curr line: { |curr indent: 0 |
87 |prev line:     { |prev indent: 4 |curr line:     if (true)  |curr indent: 4 |
88 |prev line:     if (true)  |prev indent: 4 |curr line: { |curr indent: 4 |
89 |prev line:         { |prev indent: 8 |curr line:         foo(); |curr indent: 8 |
90 |prev line:         foo(); |prev indent: 8 |curr line:    } |curr indent: 8 |
91 |prev line:         } |prev indent: 8 |curr line:    else if (true)  |curr indent: 8 |
92 |prev line:     else if (true)  |prev indent: 4 |curr line: {} |curr indent: 4 |
93 |prev line:     {} |prev indent: 4 |curr line:    else  |curr indent: 4 |
94 |prev line:     else  |prev indent: 4 |curr line: { |curr indent: 4 |
95 |prev line:         { |prev indent: 8 |curr line:         bar(); |curr indent: 8 |
96 |prev line:         bar(); |prev indent: 8 |curr line:         foo(); |curr indent: 8 |
97 |prev line:         foo(); |prev indent: 8 |curr line:         foobar(); |curr indent: 8 |
98 |prev line:         foobar(); |prev indent: 8 |curr line:         } |curr indent: 8 |
99 |prev line:         } |prev indent: 8 |curr line: } |curr indent: 8 |
100 |prev line: } |prev indent: 0 |curr line:  |curr indent: 0 |
********** After Indent Management
int testmain() 
    {
    char str[5][50], temp[50];
    printf("Enter 5 words: ");
    
    // Getting strings input
    for (int i = 0; i < 5; ++i) 
        {
        fgets(str[i], sizeof(str[i]), stdin);
        }
    
    // storing strings in the lexicographical order
    for (int i = 0; i < 5; ++i) 
        {
        for (int j = i + 1; j < 5; ++j) 
            {
            // swapping strings if they are not in the lexicographical order
            if (strcmp(str[i], str[j]) > 0) 
            {}
            strcpy(temp, str[i]);
            strcpy(str[i], str[j]);
            strcpy(str[j], temp);
            }
      }
    
    for (int i = 0; i < 5; ++i) 
        {
        fputs(str[i], stdout);
        }
    
    return 0;
    
    }

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>



void bmain()
    {
    printf("whitesmiths indent example");
    if (true)
        {
        bool test = false;
        }
   }

int main() 
    {
    char str[5][50], temp[50];
    printf("Enter 5 words: ");
    
    // Getting strings input
    for (int i = 0; i < 5; ++i) 
        {
        fgets(str[i], sizeof(str[i]), stdin);
        }
    
    // storing strings in the lexicographical order
    for (int i = 0; i < 5; ++i) 
        {
        for (int j = i + 1; j < 5; ++j) 
            {
            // swapping strings if they are not in the lexicographical order
            if (strcmp(str[i], str[j]) > 0) 
            {}
            strcpy(temp, str[i]);
            strcpy(str[i], str[j]);
            strcpy(str[j], temp);
            }
      }
    
    for (int i = 0; i < 5; ++i) 
        {
        fputs(str[i], stdout);
        }
    
    return 0;
    
    }



void foo() 
    {
    if (true) 
        {
        foo();
        }
    else if (true) 
    {}
    else 
        {
        bar();
        foo();
        foobar();
        }
}

[LINTED] pres
